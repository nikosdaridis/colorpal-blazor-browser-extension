<span class=@GetClass()
      style="background-color: @HEXColor;"
      data-color=@HEXColor
      id=@($"colorRectangle{(IsSelected ? "-active" : string.Empty)}")
      draggable=@(ActiveColorTool == ColorToolType.Move ? "true" : "false")
      @onclick=HandleOnClickAsync>

    @if (ActiveColorTool == ColorToolType.TintsShades && TintsShadesIndex is not null)
    {
        <h4 class="absolute bottom-0 left-1/2 -translate-x-1/2 transform font-semibold text-[8px]"
            style="color: @(TintsShadesIndex <= 50 ? "white" : "black");">
            @TintsShadesIndex
        </h4>
    }
    else
    {
        <img class="w-[60%]"
             draggable="false"
             src=@GetImgSrc() />
    }
</span>

@code {
    [Parameter]
    public string HEXColor { get; set; } = "ffffff";

    [Parameter]
    public bool IsSelected { get; set; }

    [Parameter]
    public int? TintsShadesIndex { get; set; }

    [Parameter]
    public ColorToolType ActiveColorTool { get; set; }

    [Parameter]
    public ColorCodeFormat ActiveColorCodeFormat { get; set; }

    [Parameter]
    public IJSRuntime? JSRuntime { get; set; }

    [Parameter]
    public LocalStorageService? LocalStorageService { get; set; }

    [Parameter]
    public EventAggregator<string>? EventAggregator { get; set; }

    /// <summary>
    /// Handles on click event, copies color code to clipboard based on active format and handles active color tool event
    /// </summary>
    public async Task HandleOnClickAsync(MouseEventArgs args)
    {
        if (JSRuntime is null || LocalStorageService is null || EventAggregator is null)
            return;

        ColorCodeFormat activeColorCodeFormat = Enum.Parse<ColorCodeFormat>(await LocalStorageService.GetKeyAsync<string>(StorageKey.ColorCodeFormat) ?? ColorCodeFormat.HEX.Value());
        CssFilter filter = new();

        if (activeColorCodeFormat == ColorCodeFormat.Filter)
        {
            filter = await JSRuntime.InvokeAsync<CssFilter>(JsFuncs.HexToFilter.Value(), HEXColor);

            if (await LocalStorageService.GetKeyAsync<string>(StorageKey.PrependBlackFilter) == "true")
                filter.Filter = filter.Filter?.Replace("filter:", "filter: brightness(0) saturate(100%)");
        }

        string colorCodeValue = ActiveColorCodeFormat switch
        {
            ColorCodeFormat.HEX => await LocalStorageService.GetKeyAsync<string>(StorageKey.AddHexCharacter) == "true" ? HEXColor : HEXColor[1..],
            ColorCodeFormat.RGB => await JSRuntime.InvokeAsync<string>(JsFuncs.HexToRgb.Value(), HEXColor, "string"),
            ColorCodeFormat.HSL => await JSRuntime.InvokeAsync<string>(JsFuncs.HexToHsl.Value(), HEXColor, "string"),
            ColorCodeFormat.HSV => await JSRuntime.InvokeAsync<string>(JsFuncs.HexToHsv.Value(), HEXColor, "string"),
            ColorCodeFormat.Filter => filter.Filter ?? HEXColor,
            _ => HEXColor
        };

        if (await LocalStorageService.GetKeyAsync<string>(StorageKey.AutoCopyCode) == "true")
            _ = JSRuntime.InvokeVoidAsync(JsFuncs.CopyToClipboard.Value(), colorCodeValue);

        await EventAggregator.GetService(Event.SetSelectedColor).PublishAsync(HEXColor);

        if (ActiveColorTool == ColorToolType.Delete)
            await DeleteSavedColor();

        if (ActiveColorTool == ColorToolType.TintsShades)
            await EventAggregator.GetService(Event.RenderTintsShades).PublishAsync(HEXColor);
    }

    /// <summary>
    /// Gets class based on selected state and active color tool
    /// </summary>
    private string GetClass()
    {
        string baseClass = "aspect-square relative flex justify-center items-center cursor-pointer transition-all duration-200 hover:scale-[1.1] hover:ring-[var(--primary-color)]";
        string shapeClass = IsSelected ? "rounded-xl" : "rounded-md";
        string ringClass = IsSelected
            ? "ring-2 ring-[var(--selected-color)]"
            : ActiveColorTool switch
            {
                ColorToolType.Move => "ring-1 ring-[var(--move-tool-color)]",
                ColorToolType.TintsShades => "ring-1 ring-[var(--tintsshades-tool-color)]",
                ColorToolType.Delete => "ring-1 ring-[var(--delete-tool-color)]",
                _ => "ring-1 ring-[var(--theme-invert-color)]"
            };

        return $"{baseClass} {shapeClass} {ringClass}";
    }

    /// <summary>
    /// Gets image source based on active color tool
    /// </summary>
    private string GetImgSrc() =>
        ActiveColorTool switch
        {
            ColorToolType.Move => "Icons/move.svg",
            ColorToolType.TintsShades => "Icons/tintsShades.svg",
            ColorToolType.Delete => "Icons/delete.svg",
            _ => string.Empty
        };

    /// <summary>
    /// Deletes saved color from local storage and publishes event
    /// </summary>
    private async Task<bool> DeleteSavedColor()
    {
        if (LocalStorageService is null || EventAggregator is null)
            return false;

        string[] savedColors = await LocalStorageService.GetKeyAsync<string[]>(StorageKey.SavedColorsArray) ?? [];

        if (!savedColors.Contains(HEXColor))
            return false;

        savedColors = savedColors.Where(color => color != HEXColor).ToArray();

        await LocalStorageService.SetKeyAsync(StorageKey.SavedColorsArray, savedColors);
        await EventAggregator.GetService(Event.DeleteSavedColor).PublishAsync(HEXColor);

        return true;
    }
}
