@implements IDisposable

<div class="mt-2 space-y-2">
    <div class="flex items-center space-x-2">
        @if (JSRuntime is not null)
        {
            <button class="inline-flex h-8 w-10 cursor-pointer items-center justify-center rounded-md border border-[var(--secondary-color)] bg-[var(--primary-color)] font-medium transition-transform duration-100 hover:bg-[var(--secondary-color)] active:scale-90"
                    @onclick=@(() => JSRuntime.InvokeVoidAsync(JsFuncs.CopyToClipboard.Value(), _colorCodeValue))>

                @if (_activeColorCodeFormat == ColorCodeFormat.Filter)
                {
                    <img class="h-[15px] w-[15px]"
                         style=@_iconCSSFilter.Filter
                         draggable="false"
                         src="Icons/copyClipboard.svg" />
                }
                else
                {
                    <img class="theme-filter h-[15px] w-[15px]"
                         draggable="false"
                         src="Icons/copyClipboard.svg" />
                }
            </button>
        }

        <div class="flex min-h-8 w-full items-center justify-center rounded-md border border-[var(--secondary-color)] bg-[var(--primary-color)] text-center text-sm break-words text-[var(--theme-invert-color)] select-text"
             style="font-size: @((_activeColorCodeFormat == ColorCodeFormat.Filter) ? "11" : "14")px;"
             contenteditable="false">
            @_colorCodeValue
        </div>
    </div>
</div>

@code {
    [Parameter]
    public IJSRuntime? JSRuntime { get; set; }

    [Parameter]
    public LocalStorageService? LocalStorageService { get; set; }

    [Parameter]
    public EventAggregator<string>? EventAggregator { get; set; }

    private ColorCodeFormat _activeColorCodeFormat = ColorCodeFormat.HEX;
    private string _colorCodeValue = string.Empty;
    private CssFilter _iconCSSFilter = new();
    private Timer? _updateColorCodeDebounceTimer;

    /// <summary>
    /// Subscribes to events, updates active color code format and value
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (LocalStorageService is null || EventAggregator is null)
            return;

        EventAggregator.GetService(Event.ColorCodeActiveTab).Subscribe(UpdateActiveColorCodeFormatAsync);
        EventAggregator.GetService(Event.SetSelectedColor).Subscribe(UpdateColorCodeWithDebounceAsync);

        _activeColorCodeFormat = Enum.Parse<ColorCodeFormat>(await LocalStorageService.GetKeyAsync<string>(StorageKey.ColorCodeFormat) ?? ColorCodeFormat.HEX.Value());
        await UpdateColorCodeAsync(await LocalStorageService.GetKeyAsync<string>(StorageKey.SelectedHexColor) ?? string.Empty);
    }

    /// <summary>
    /// Handles updates to the active color code format and value
    /// </summary>
    private async Task UpdateActiveColorCodeFormatAsync(string? activeColorCodeFormat)
    {
        _activeColorCodeFormat = Enum.Parse<ColorCodeFormat>(activeColorCodeFormat ?? ColorCodeFormat.HEX.Value());

        if (LocalStorageService is null)
            return;

        await UpdateColorCodeAsync(await LocalStorageService.GetKeyAsync<string>(StorageKey.SelectedHexColor) ?? string.Empty);

    }

    /// <summary>
    /// Updates color code value based on active format with debounce
    /// </summary>
    private async Task UpdateColorCodeWithDebounceAsync(string hexColor)
    {
        if (string.IsNullOrWhiteSpace(hexColor))
            return;

        _updateColorCodeDebounceTimer?.Dispose();

        _updateColorCodeDebounceTimer = new Timer(async _ =>
        {
            await UpdateColorCodeAsync(hexColor);
        }, null, 2, Timeout.Infinite);

        await Task.CompletedTask;
    }

    /// <summary>
    /// Updates color code value based on active format
    /// </summary>
    private async Task UpdateColorCodeAsync(string hexColor)
    {
        if (JSRuntime is null || LocalStorageService is null || string.IsNullOrWhiteSpace(hexColor))
            return;

        if (_activeColorCodeFormat == ColorCodeFormat.Filter)
        {
            _iconCSSFilter = await JSRuntime.InvokeAsync<CssFilter>(JsFuncs.HexToFilter.Value(), hexColor);

            if (await LocalStorageService.GetKeyAsync<string>(StorageKey.PrependBlackFilter) == "true")
                _iconCSSFilter.Filter = _iconCSSFilter.Filter?.Replace("filter:", "filter: brightness(0) saturate(100%)");

            await JSRuntime.InvokeVoidAsync(JsFuncs.SetElementValueById.Value(), "colorCodeTab-Filter", $"{_iconCSSFilter.Loss:0.#}% Loss");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync(JsFuncs.SetElementValueById.Value(), "colorCodeTab-Filter", "Filter");
        }

        _colorCodeValue = _activeColorCodeFormat switch
        {
            ColorCodeFormat.HEX => await LocalStorageService.GetKeyAsync<string>(StorageKey.AddHexCharacter) == "true" ? hexColor : hexColor[1..],
            ColorCodeFormat.RGB => await JSRuntime.InvokeAsync<string>(JsFuncs.HexToRgb.Value(), hexColor, "string"),
            ColorCodeFormat.HSL => await JSRuntime.InvokeAsync<string>(JsFuncs.HexToHsl.Value(), hexColor, "string"),
            ColorCodeFormat.HSV => await JSRuntime.InvokeAsync<string>(JsFuncs.HexToHsv.Value(), hexColor, "string"),
            ColorCodeFormat.Filter => _iconCSSFilter.Filter ?? string.Empty,
            _ => hexColor
        };

        await InvokeAsync(StateHasChanged);
        _ = JSRuntime.InvokeVoidAsync(JsFuncs.SetColorPickerPosition.Value());
    }

    /// <summary>
    /// Unsubscribes from events
    /// </summary>
    public void Dispose()
    {
        if (EventAggregator is null)
            return;

        EventAggregator.GetService(Event.ColorCodeActiveTab).Unsubscribe(UpdateActiveColorCodeFormatAsync);
        EventAggregator.GetService(Event.SetSelectedColor).Unsubscribe(UpdateColorCodeWithDebounceAsync);
    }
}
