@implements IDisposable

<div id="colorToolsBar" class="flex items-center justify-between">
    @foreach (ColorToolType tool in Enum.GetValues(typeof(ColorToolType)).Cast<ColorToolType>().Skip(1))
    {
        <ColorTool Id=@($"colorTool-{tool.Value()}")
                   IconPath=@($"Icons/{tool.Value()}.svg")
                   IconSize=Size.Small
                   IconTextFilter=true
                   HandleClick=@(async e => await HandleColorToolClickAsync(tool))
                   IsActive=@(_activeColorTool == tool.Value()) />
    }

    <select class="h-8 w-13 cursor-pointer items-center justify-center rounded-md bg-[var(--secondary-color)] p-2 text-sm text-[var(--text-color)] focus:ring-0 focus:outline-none"
            id="colorsPerLine"
            @bind:get=_colorsPerLine
            @bind:set=HandleColorsPerLineChangeAndPublishEventAsync>
        @for (int i = 5; i <= 10; i++)
        {
            <option value=@i>@i</option>
        }
    </select>
</div>

@code {
    [Parameter]
    public IJSRuntime? JSRuntime { get; set; }

    [Parameter]
    public LocalStorageService? LocalStorageService { get; set; }

    [Parameter]
    public EventAggregator<string>? EventAggregator { get; set; }

    [Parameter]
    public StateService? StateService { get; set; }

    private string? _activeColorTool { get; set; }
    private string _colorsPerLine { get; set; } = "5";

    /// <summary>
    /// Subscribes to events and sets colors per line
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (JSRuntime is null || LocalStorageService is null || EventAggregator is null)
            return;

        EventAggregator.GetService(Event.EyedropperPick).Subscribe(ResetActiveColorToolAsync);
        EventAggregator.GetService(Event.OpenColorPicker).Subscribe(ResetActiveColorToolAsync);
        EventAggregator.GetService(Event.ColorsPerLine).Subscribe(HandleColorsPerLineChangeAsync);

        _colorsPerLine = await LocalStorageService.GetKeyAsync<string>(StorageKey.ColorsPerLine) ?? "5";
        await JSRuntime.InvokeVoidAsync(JsFuncs.SetSelectValue.Value(), "colorsPerLine", _colorsPerLine);
    }

    /// <summary>
    /// Handles color tool click and publishes events
    /// </summary>
    private async Task HandleColorToolClickAsync(ColorToolType tool)
    {
        if (JSRuntime is null || LocalStorageService is null || EventAggregator is null || StateService is null)
            return;

        ColorToolType previousActiveColorTool = await SetActiveColorToolAsync();

        Task task = tool switch
        {
            ColorToolType.Move => HandleMoveAsync(previousActiveColorTool),
            ColorToolType.TintsShades => Task.CompletedTask,
            ColorToolType.Delete => Task.CompletedTask,
            ColorToolType.DeleteAll => HandleDeleteAllAsync(),
            ColorToolType.DownloadPNG => HandleDownloadPNGAsync(),
            ColorToolType.DownloadCSV => HandleDownloadCSVAsync(),
            _ => Task.CompletedTask
        };

        await task;

        async Task HandleMoveAsync(ColorToolType previousActiveColorTool)
        {
            if (previousActiveColorTool == ColorToolType.Move)
                return;

            await JSRuntime.InvokeVoidAsync(JsFuncs.HandleColorsMove.Value());
        }

        async Task HandleDeleteAllAsync()
        {
            if ((await LocalStorageService.GetKeyAsync<string[]>(StorageKey.SavedColorsArray) ?? []).Length == 0)
                return;

            if (await JSRuntime.InvokeAsync<bool>("confirm", "Delete all saved colors?"))
            {
                await LocalStorageService.SetKeyAsync<string[]>(StorageKey.SavedColorsArray, []);
                await EventAggregator.GetService(Event.DeleteAllSavedColors).PublishAsync(ColorToolType.DeleteAll.Value());
            }
        }

        async Task HandleDownloadPNGAsync()
        {
            await JSRuntime.InvokeVoidAsync(
                JsFuncs.DownloadPng.Value(),
                await LocalStorageService.GetKeyAsync<string[]>(StorageKey.SavedColorsArray) ?? [],
                Int32.Parse(await LocalStorageService.GetKeyAsync<string>(StorageKey.ColorsPerLine) ?? "5"),
                await LocalStorageService.GetKeyAsync<string>(StorageKey.ShowColorNames) == "true" ? true : false,
                await LocalStorageService.GetKeyAsync<string>(StorageKey.AddHexCharacter) == "true" ? true : false
            );
        }

        async Task HandleDownloadCSVAsync()
        {
            string[] savedColors = await LocalStorageService.GetKeyAsync<string[]>(StorageKey.SavedColorsArray) ?? [];

            if (!savedColors.Any())
                return;

            StringBuilder csvBuilder = new();
            csvBuilder.AppendLine("Name,#HEX,HEX,RGB,HSL,HSV,Filter,Prepend Black Filter,Filter Loss");

            foreach (string hexColor in savedColors)
            {
                ColorRGB rgbColor = await JSRuntime.InvokeAsync<ColorRGB>(JsFuncs.HexToRgb.Value(), hexColor);
                string closestColorName = StateService.FindClosestRoundedColorName(rgbColor);
                CssFilter cssFilter = await JSRuntime.InvokeAsync<CssFilter>(JsFuncs.HexToFilter.Value(), hexColor);

                csvBuilder.AppendLine(string.Format("\"{0}\",\"{1}\",\"{2}\",\"{3}\",\"{4}\",\"{5}\",\"{6}\",\"{7}\",\"{8}\"",
                    closestColorName,
                    hexColor,
                    hexColor.Length > 1 ? hexColor[1..] : string.Empty,
                    await JSRuntime.InvokeAsync<string>(JsFuncs.HexToRgb.Value(), hexColor, "string") ?? string.Empty,
                    await JSRuntime.InvokeAsync<string>(JsFuncs.RgbToHsl.Value(), rgbColor, "string") ?? string.Empty,
                    await JSRuntime.InvokeAsync<string>(JsFuncs.RgbToHsv.Value(), rgbColor, "string") ?? string.Empty,
                    cssFilter.Filter ?? string.Empty,
                    cssFilter.Filter?.Replace("filter:", "filter: brightness(0) saturate(100%)") ?? string.Empty,
                    $"{cssFilter.Loss?.ToString("0.##")}%" ?? string.Empty
                ));
            }

            await JSRuntime.InvokeVoidAsync(JsFuncs.DownloadCsv.Value(), csvBuilder.ToString(), "ColorPal-Data");
        }

        async Task<ColorToolType> SetActiveColorToolAsync()
        {
            if (!EnumExtensions.TryParse(_activeColorTool, out previousActiveColorTool))
                previousActiveColorTool = ColorToolType.None;

            if (previousActiveColorTool == ColorToolType.Move)
                await JSRuntime.InvokeVoidAsync(JsFuncs.RemoveMoveColorsListeners.Value());

            _activeColorTool = tool switch
            {
                ColorToolType.DeleteAll or ColorToolType.DownloadPNG or ColorToolType.DownloadCSV => ColorToolType.None.Value(),
                _ when _activeColorTool != tool.Value() => tool.Value(),
                _ => ColorToolType.None.Value()
            };

            await EventAggregator.GetService(Event.SetActiveColorTool).PublishAsync(_activeColorTool);

            return previousActiveColorTool;
        }
    }

    /// <summary>
    /// Resets active color tool and publishes event
    /// </summary>
    private async Task ResetActiveColorToolAsync(string hexColor)
    {
        if (EventAggregator is null)
            return;

        _activeColorTool = string.Empty;
        await EventAggregator.GetService(Event.SetActiveColorTool).PublishAsync(_activeColorTool);

        StateHasChanged();
    }

    /// <summary>
    /// Handles colors per line change and renders component
    /// </summary>
    private async Task HandleColorsPerLineChangeAsync(string colorsPerLine)
    {
        _colorsPerLine = colorsPerLine;
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Handles colors per line change and publishes event
    /// </summary>
    private async Task HandleColorsPerLineChangeAndPublishEventAsync(string? colorsPerLine)
    {
        if (LocalStorageService is null || EventAggregator is null)
            return;

        _colorsPerLine = colorsPerLine ?? "5";

        await LocalStorageService.SetKeyAsync(StorageKey.ColorsPerLine, _colorsPerLine);
        await EventAggregator.GetService(Event.ColorsPerLine).PublishAsync(_colorsPerLine);

        StateHasChanged();
    }

    /// <summary>
    /// Unsubscribes from events
    /// </summary>
    public void Dispose()
    {
        if (EventAggregator is null)
            return;

        EventAggregator.GetService(Event.EyedropperPick).Unsubscribe(ResetActiveColorToolAsync);
        EventAggregator.GetService(Event.OpenColorPicker).Unsubscribe(ResetActiveColorToolAsync);
        EventAggregator.GetService(Event.ColorsPerLine).Unsubscribe(HandleColorsPerLineChangeAsync);
    }
}
