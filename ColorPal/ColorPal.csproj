<Project Sdk="Microsoft.NET.Sdk.BlazorWebAssembly">

	<PropertyGroup>
		<TargetFramework>net9.0</TargetFramework>
		<Nullable>enable</Nullable>
		<ImplicitUsings>enable</ImplicitUsings>

		<NpmLastInstall>node_modules/.last-install</NpmLastInstall>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Blazored.LocalStorage" Version="4.5.0" />
		<PackageReference Include="MessagePack" Version="3.1.4" />
		<PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly" Version="9.0.7" />
		<PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.DevServer" Version="9.0.7" PrivateAssets="all" />
	</ItemGroup>

	<Target Name="CheckForNodeJs" BeforeTargets="CheckForNpm">
		<Exec Command="node -v" ContinueOnError="true">
			<Output TaskParameter="ExitCode" PropertyName="NodeJsCheckExitCode" />
		</Exec>
		<Error Condition="'$(NodeJsCheckExitCode)' != '0'" Text="You must install Node.js to build this project" />
	</Target>

	<Target Name="CheckForNpm" BeforeTargets="NpmInstall">
		<Exec Command="npm -v" ContinueOnError="true">
			<Output TaskParameter="ExitCode" PropertyName="NpmCheckExitCode" />
		</Exec>
		<Error Condition="'$(NpmCheckExitCode)' != '0'" Text="You must install NPM to build this project" />
	</Target>

	<Target Name="NpmInstall" BeforeTargets="CompileTypeScript" Inputs="package.json" Outputs="$(NpmLastInstall)">
		<Exec Command="npm install" />
		<Touch Files="$(NpmLastInstall)" AlwaysCreate="true" />
	</Target>

	<Target Name="CompileTypeScript" BeforeTargets="CompileTailwindCSS" Condition="Exists('tsconfig.json')" DependsOnTargets="NpmInstall">
		<Exec Command="npm run typescript-build" Condition="'$(Configuration)' == 'Debug'" />
		<Exec Command="npm run typescript-release" Condition="'$(Configuration)' == 'Release'" />
	</Target>

	<Target Name="CompileTailwindCSS" BeforeTargets="PreBuildEvent">
		<Exec Command="npm run tailwind-build" Condition="'$(Configuration)' == 'Debug'" />
		<Exec Command="npm run tailwind-release" Condition="'$(Configuration)' == 'Release'" />
	</Target>

	<Target Name="Rename_framework" BeforeTargets="CleanupPublish">
		<Exec Command="powershell -Command &quot;Remove-Item '$(PublishDir)wwwroot\framework\' -Recurse -ErrorAction Ignore; Rename-Item -Path '$(PublishDir)wwwroot\_framework' -NewName framework;&quot;" />

		<Exec Command="powershell -Command &quot;(gc '$(PublishDir)wwwroot\framework\blazor.webassembly.js') -replace '_framework', 'framework' | sc '$(PublishDir)wwwroot\framework\blazor.webassembly.js'&quot;" />

		<Exec Command="powershell -Command &quot;(gc '$(PublishDir)wwwroot\framework\blazor.webassembly.js').replace('e.put(n,new Response(r,{headers:{\&quot;content-type\&quot;:a.headers.get(\&quot;content-type\&quot;)||\&quot;\&quot;,\&quot;content-length\&quot;:(u||a.headers.get(\&quot;content-length\&quot;)||\&quot;\&quot;).toString()}}))', 'function(){if(n.startsWith(\&quot;chrome-extension\&quot;)){}else{e.put(n,new Response(r,{headers:{\&quot;content-type\&quot;:a.headers.get(\&quot;content-type\&quot;)||\&quot;\&quot;,\&quot;content-length\&quot;:(u||a.headers.get(\&quot;content-length\&quot;)||\&quot;\&quot;).toString()}}))}}()') | sc '$(PublishDir)wwwroot\framework\blazor.webassembly.js'&quot;" />

		<Exec Command="powershell -Command &quot;(gc '$(PublishDir)wwwroot\index.html') -replace '_framework', 'framework' | sc '$(PublishDir)wwwroot\index.html'&quot;" />
	</Target>

	<Target Name="CleanupPublish" BeforeTargets="ZipPublish">
		<ItemGroup>
			<FilesToRemove Include="$(PublishDir)wwwroot\ColorPal.styles.css" />
			<FilesToRemove Include="$(PublishDir)wwwroot\CSS\tailwind.css" />
			<FilesToRemove Include="$(PublishDir)wwwroot\JavaScript\uglify.js" />
		</ItemGroup>
		<Delete Files="@(FilesToRemove)" />
		<RemoveDir Directories="$(PublishDir)wwwroot\TypeScript" Condition="Exists('$(PublishDir)wwwroot\TypeScript')" />
	</Target>

	<Target Name="ZipPublish" BeforeTargets="UnzipPublish">
		<PropertyGroup>
			<ManifestJsonPath>$(PublishDir)wwwroot\manifest.json</ManifestJsonPath>
			<VersionOutputFile>$(PublishDir)version.txt</VersionOutputFile>
		</PropertyGroup>

		<Exec Command="powershell -Command &quot;(Get-Content '$(ManifestJsonPath)' | ConvertFrom-Json).version | Out-File -FilePath '$(VersionOutputFile)' -Force&quot;" />

		<ReadLinesFromFile File="$(VersionOutputFile)">
			<Output TaskParameter="Lines" PropertyName="Version" />
		</ReadLinesFromFile>

		<Exec Command="powershell Compress-Archive -Path '$(PublishDir)wwwroot\*' -DestinationPath '$(PublishDir)colorpal_$(Version).zip'" />

		<Delete Files="$(VersionOutputFile)" />
	</Target>

	<Target Name="UnzipPublish" AfterTargets="Publish">
		<PropertyGroup>
			<ZipFilePath>$(PublishDir)colorpal_$(Version).zip</ZipFilePath>
			<UnzipDestinationPath>$(PublishDir)colorpal_$(Version)\</UnzipDestinationPath>
		</PropertyGroup>

		<MakeDir Directories="$(UnzipDestinationPath)" />

		<Exec Command="powershell -Command &quot;Expand-Archive -Path '$(ZipFilePath)' -DestinationPath '$(UnzipDestinationPath)' -Force&quot;" />
	</Target>

</Project>
